## Move to new scene
go(image_paths = img_paths, index = 3)
## Don't forget to pop the question!
pop()
## Move to new scene
go(image_paths = img_paths, index = 4)
## Don't forget to pop the question!
pop()
devtools::build()
devtools::install_local( "C:/spmodels/r2vr_0.0.0.9000.tar.gz", force=T)
library(r2vr)
library(httr)
library(jsonlite)
# Enter IP
IPv4_ADDRESS <- "131.181.64.15"
# Define image paths
img_paths <- c("../inst/ext/images/koalas/KP5.jpg",
"../inst/ext/images/koalas/SP10.jpg",
"../inst/ext/images/koalas/foundKoala1.jpg",
"../inst/ext/images/koalas/foundKoala2.jpg")
animals <- binary_question_scene("Do you see any koalas in this image?", "Yes", "No", img_paths, IPv4_ADDRESS)
## Launch VR server
start(IPv4_ADDRESS)
## Pop a question for first scene
pop()
## Pop a question for first scene
pop()
# Get data from database with API GET request
koala.df <- read(url = "https://test-api-koala.herokuapp.com/koala")
koala.df
## Move to new scene
go(image_paths = img_paths, index = 2)
## Don't forget to pop the question!
pop()
# Get data from database with API GET request
koala.df <- read(url = "https://test-api-koala.herokuapp.com/koala")
koala.df
## Move to new scene
go(image_paths = img_paths, index = 3)
## Don't forget to pop the question!
pop()
# Get data from database with API GET request
koala.df <- read(url = "https://test-api-koala.herokuapp.com/koala")
koala.df
# Get data from database with API GET request
koala.df <- read(url = "https://test-api-koala.herokuapp.com/koala")
koala.df
Sys.time()
users <- data.frame(userID = c("Grace"), datetime = Sys.time())
users <- dplyr::bind_rows(users, data.frame(userID = c("Julie"), datetime = Sys.time()))
users
users <- data.frame(userID = c("Grace"), datetime = Sys.time(), start = c(1), end = c(0))
users <- dplyr::bind_rows(users, data.frame(userID = c("Grace"), datetime = Sys.time(), start = c(0), end = c(1)))
users
users.df <- data.frame(userID = c("Grace"), datetime = Sys.time(), status = c("start"))
record_times <- function(userID, status, users.df){
users.df <- dplyr::bind_rows(users.df, data.frame(userID = c("Grace"), datetime = Sys.time(), status = c(status)))
}
users.df <- record_times("Grace", "end", users.df)
users.df <- record_times("Grace", "end", users.df)
library(r2vr)
library(httr)
library(jsonlite)
## Name of participant
participant <- "Grace"
record_times <- function(participant, status, users.df){users.df <- rbind(users.df, data.frame(userID = c(participant), datetime = Sys.time(), status = c(status)))}
# Enter IP
IPv4_ADDRESS <- "131.181.64.15"
# Define image paths
img_paths <- c("../inst/ext/images/koalas/KP5.jpg",
"../inst/ext/images/koalas/SP10.jpg",
"../inst/ext/images/koalas/foundKoala1.jpg",
"../inst/ext/images/koalas/foundKoala2.jpg")
animals <- binary_question_scene("Do you see any koalas in this image?", "Yes", "No", img_paths, IPv4_ADDRESS, "koala")
devtools::build()
devtools::install_local("C:/spmodels/r2vr_0.0.0.9000.tar.gz")
library(r2vr)
library(httr)
library(jsonlite)
## Name of participant
participant <- "Grace"
record_times <- function(participant, status, users.df){users.df <- rbind(users.df, data.frame(userID = c(participant), datetime = Sys.time(), status = c(status)))}
# Enter IP
IPv4_ADDRESS <- "131.181.64.15"
# Define image paths
img_paths <- c("../inst/ext/images/koalas/KP5.jpg",
"../inst/ext/images/koalas/SP10.jpg",
"../inst/ext/images/koalas/foundKoala1.jpg",
"../inst/ext/images/koalas/foundKoala2.jpg")
animals <- binary_question_scene("Do you see any koalas in this image?", "Yes", "No", img_paths, IPv4_ADDRESS, "koala")
devtools::document()
devtools::build()
devtools::install_local("C:/spmodels/r2vr_0.0.0.9000.tar.gz")
devtools::install_local("C:/spmodels/r2vr_0.0.0.9000.tar.gz")
library(r2vr)
library(httr)
library(jsonlite)
## Name of participant
participant <- "Grace"
record_times <- function(participant, status, users.df){users.df <- rbind(users.df, data.frame(userID = c(participant), datetime = Sys.time(), status = c(status)))}
# Enter IP
IPv4_ADDRESS <- "131.181.64.15"
# Define image paths
img_paths <- c("../inst/ext/images/koalas/KP5.jpg",
"../inst/ext/images/koalas/SP10.jpg",
"../inst/ext/images/koalas/foundKoala1.jpg",
"../inst/ext/images/koalas/foundKoala2.jpg")
animals <- binary_question_scene("Do you see any koalas in this image?", "Yes", "No", img_paths, IPv4_ADDRESS, "koala")
## Launch VR server
start(IPv4_ADDRESS)
## First participants
users.df <- data.frame(userID = participant, datetime = Sys.time(), status = c("start"))
## Pop a question for first scene
pop()
## Move to new scene
go(image_paths = img_paths, index = 3)
## Pop a question for first scene
pop()
## Move to new scene
go(image_paths = img_paths, index = 2)
## Don't forget to pop the question!
pop()
end()
## When participant is done:
users.df <- record_times(participant, "end", users.df)
# Get data from database with API GET request
koala.df <- read(url = "https://test-api-koala.herokuapp.com/koala")
users.df
koala.df
koala.df$recordedOn
ymd_hms(koala.df$recordedOn)
library(lubridate)
ymd_hms(koala.df$recordedOn)
ymd_hms(koala.df$recordedOn, tz = "Australia/Queensland")
koala.df$userID <- 0
users.df
filter(users.df, userID == participant, status == "start")
filter(users.df, status == "start")
users.df
dplyr::filter(users.df, status == "start")
dplyr::select(dplyr::filter(users.df, userID == participant, status == "start"), datetime)
dplyr::select(dplyr::filter(users.df, userID == participant, status == "end"), datetime)) ~ participant,
dplyr::mutate(koala.df, userID = case_when(ymd_hms("recordedOn",
tz = "Australia/Queensland") %within%
interval(dplyr::select(dplyr::filter(users.df, userID == participant, status == "start"), datetime),
dplyr::select(dplyr::filter(users.df, userID == participant, status == "end"), datetime)) ~ participant,
TRUE ~ "idk"))
dplyr::mutate(koala.df, userID = dplyr::case_when(ymd_hms("recordedOn",
tz = "Australia/Queensland") %within%
interval(dplyr::select(dplyr::filter(users.df, userID == participant, status == "start"), datetime),
dplyr::select(dplyr::filter(users.df, userID == participant, status == "end"), datetime)) ~ participant,
TRUE ~ "idk"))
users.df
ymd_hms(users.df$datetime)
ymd_hms(users.df$datetime, tz = "Australia/Queensland")
users.df$datetime <- ymd_hms(users.df$datetime, tz = "Australia/Queensland")
dplyr::mutate(koala.df, userID = dplyr::case_when(ymd_hms("recordedOn",
tz = "Australia/Queensland") %within%
interval(dplyr::select(dplyr::filter(users.df, userID == participant, status == "start"), datetime),
dplyr::select(dplyr::filter(users.df, userID == participant, status == "end"), datetime)) ~ participant,
TRUE ~ "idk"))
interval(dplyr::select(dplyr::filter(users.df, userID == participant, status == "start"), datetime),
dplyr::select(dplyr::filter(users.df, userID == participant, status == "end"), datetime))
interval(dplyr::select(dplyr::filter(users.df, userID == participant, status == "start"), datetime),
dplyr::select(dplyr::filter(users.df, userID == participant, status == "end"), datetime))
class(users.df)
class(users.df$datetime)
dplyr::mutate(koala.df, userID = dplyr::case_when(ymd_hms("recordedOn",
tz = "Australia/Queensland") %within%
lubridate::interval(dplyr::select(dplyr::filter(users.df, userID == participant, status == "start"),
datetime),
dplyr::select(dplyr::filter(users.df, userID == participant, status == "end"),
datetime)) ~ participant,
TRUE ~ "idk"))
lubridate::interval(dplyr::select(dplyr::filter(users.df, userID == participant, status == "start"),
datetime),
dplyr::select(dplyr::filter(users.df, userID == participant, status == "end"),
datetime))
?interval
lubridate::interval(dplyr::select(dplyr::filter(users.df, userID == participant, status == "start"),
datetime),
dplyr::select(dplyr::filter(users.df, userID == participant, status == "end"),
datetime), tz = "Australia/Queensland")
dplyr::select(dplyr::filter(users.df, userID == participant, status == "start"),
datetime)
c(dplyr::select(dplyr::filter(users.df, userID == participant, status == "start"),
datetime))
lubridate::interval(c(dplyr::select(dplyr::filter(users.df, userID == participant, status == "start"),
datetime)),
c(dplyr::select(dplyr::filter(users.df, userID == participant, status == "end"),
datetime))
)
lubridate::interval(c(dplyr::select(dplyr::filter(users.df, userID == participant, status == "start"),
datetime)),
c(dplyr::select(dplyr::filter(users.df, userID == participant, status == "end"),
datetime)))
c(dplyr::select(dplyr::filter(users.df, userID == participant, status == "start"),
datetime))
c(dplyr::select(dplyr::filter(users.df, userID == participant, status == "end"),
datetime))
interval( "2020-01-24 12:58:08 AEST", "2020-01-24 12:58:45 AEST")
users.df[users.df$userID == participant & users.df$status == "start", "datetime"]
dplyr::mutate(koala.df, userID = dplyr::case_when(ymd_hms("recordedOn",
tz = "Australia/Queensland") %within%
lubridate::interval(users.df[users.df$userID == participant & users.df$status == "start", "datetime"],
users.df[users.df$userID == participant & users.df$status == "end", "datetime"]) ~ participant,
TRUE ~ "idk"))
ymd_hms(koala.df$recordedOn,
tz = "Australia/Queensland") %within%
lubridate::interval(users.df[users.df$userID == participant & users.df$status == "start", "datetime"],
users.df[users.df$userID == participant & users.df$status == "end", "datetime"])
koala.df$recordedOn <-  ymd_hms(koala.df$recordedOn, tz = "Australia/Queensland")
dplyr::mutate(koala.df, userID = dplyr::case_when(ymd_hms("recordedOn",
tz = "Australia/Queensland") %within%
lubridate::interval(users.df[users.df$userID == participant & users.df$status == "start", "datetime"],
users.df[users.df$userID == participant & users.df$status == "end", "datetime"]) ~ participant,
TRUE ~ "idk"))
participant
# Get data from database with API GET request
koala.df <- read(url = "https://test-api-koala.herokuapp.com/koala")
koala.df
library(lubridate)
with_tz(ymd_hms(koala.df$recordedOn), tz = "Australia/Queensland")
users.df$datetime <- ymd_hms(users.df$datetime, tz = "Australia/Queensland")
koala.df$recordedOn <-  ymd_hms(koala.df$recordedOn, tz = "Australia/Queensland")
dplyr::mutate(koala.df, userID = dplyr::case_when(ymd_hms("recordedOn",
tz = "Australia/Queensland") %within%
lubridate::interval(users.df[users.df$userID == participant & users.df$status == "start", "datetime"],
users.df[users.df$userID == participant & users.df$status == "end", "datetime"]) ~ participant,
TRUE ~ "idk"))
dplyr::mutate(koala.df, userID = dplyr::case_when(ymd_hms("recordedOn",
tz = "Australia/Queensland") %within%
lubridate::interval(users.df[users.df$userID == participant & users.df$status == "start", "datetime"],
users.df[users.df$userID == participant & users.df$status == "end", "datetime"]) ~ "hello",
TRUE ~ "idk"))
dplyr::mutate(koala.df, userID = dplyr::case_when("recordedOn" %within% lubridate::interval(users.df[users.df$userID == participant & users.df$status == "start", "datetime"],
users.df[users.df$userID == participant & users.df$status == "end", "datetime"]) ~ "hello",
TRUE ~ "idk"))
dplyr::mutate(koala.df, userID = dplyr::case_when(recordedOn %within% lubridate::interval(users.df[users.df$userID == participant & users.df$status == "start", "datetime"],
users.df[users.df$userID == participant & users.df$status == "end", "datetime"]) ~ "hello",
TRUE ~ "idk"))
dplyr::mutate(koala.df, userID = dplyr::case_when(recordedOn %within% lubridate::interval(users.df[users.df$userID == participant & users.df$status == "start", "datetime"],
users.df[users.df$userID == participant & users.df$status == "end", "datetime"]) ~ participant,
TRUE ~ "idk"))
dplyr::mutate(koala.df, userID = dplyr::case_when(recordedOn %within% lubridate::interval(users.df[users.df$userID == participant & users.df$status == "start", "datetime"],
users.df[users.df$userID == participant & users.df$status == "end", "datetime"]) ~ participant,
TRUE ~ "unknown"))
library(r2vr)
library(httr)
library(jsonlite)
library(lubridate)
## Name of participant
participant <- "Grace"
record_times <- function(participant, status, users.df){users.df <- rbind(users.df, data.frame(userID = c(participant), datetime = Sys.time(), status = c(status)))}
# Enter IP
IPv4_ADDRESS <- "131.181.64.15"
# Define image paths
img_paths <- c("../inst/ext/images/koalas/KP5.jpg",
"../inst/ext/images/koalas/SP10.jpg",
"../inst/ext/images/koalas/foundKoala1.jpg",
"../inst/ext/images/koalas/foundKoala2.jpg")
animals <- binary_question_scene("Do you see any koalas in this image?", "Yes", "No", img_paths, IPv4_ADDRESS, "koala")
## Launch VR server
start(IPv4_ADDRESS)
## Move to new scene
go(image_paths = img_paths, index = 3)
## Don't forget to pop the question!
pop()
## Move to new scene
go(image_paths = img_paths, index = 4)
## Pop a question for first scene
pop()
## When participant is done:
end()
users.df <- record_times(participant, "end", users.df)
# Get data from database with API GET request
koala.df <- read(url = "https://test-api-koala.herokuapp.com/koala")
users.df$datetime <- ymd_hms(users.df$datetime, tz = "Australia/Queensland")
koala.df$recordedOn <-  ymd_hms(koala.df$recordedOn, tz = "Australia/Queensland")
dplyr::mutate(koala.df, userID = dplyr::case_when(recordedOn %within%
lubridate::interval(users.df[users.df$userID == participant & users.df$status == "start", "datetime"],
users.df[users.df$userID == participant & users.df$status == "end", "datetime"]) ~ participant,
TRUE ~ userID))
library(r2vr)
library(httr)
library(jsonlite)
# Enter IP
IPv4_ADDRESS <- "131.181.64.15"
# Define image paths
img_paths <- c("../inst/ext/images/jaguars/WP14_360_002.jpg",
"../inst/ext/images/jaguars/WP55_360_001.jpg",
"../inst/ext/images/jaguars/WP56_360_001.jpg",
"../inst/ext/images/jaguars/WP60_360_001.jpg")
animals <- multivariable_question_scene("Do you see any of these habitat features in this image? If you do see a feature, click on the box to select it.",
"water", "Jaguar tracks", "Scratch marks", "Dense Vegetation", img_paths)
## Launch VR server
start(IPv4_ADDRESS)
## Pop a question for first scene
pop(question_type = "multivariable")
## Move to new scene
go(image_paths = img_paths, index = 1, question_type = "multivariable")
## Don't forget to pop the question!
pop(question_type = "multivariable")
# Get data from database with API GET request
read(url = "https://test-api-koala.herokuapp.com/jaguar")
# Get data from database with API GET request
jaguar.df <- read(url = "https://test-api-koala.herokuapp.com/jaguar")
jaguar.df$recordedOn <-  ymd_hms(koala.df$recordedOn, tz = "Australia/Queensland")
jaguar.df
jaguar.df$recordedOn <-  ymd_hms(jaguar.df$recordedOn, tz = "Australia/Queensland")
jaguar.df
## Move to new scene
go(image_paths = img_paths, index = 2, question_type = "multivariable")
## Don't forget to pop the question!
pop(question_type = "multivariable")
## Move to new scene
go(image_paths = img_paths, index = 2, question_type = "multivariable")
## Don't forget to pop the question!
pop(question_type = "multivariable")
# Get data from database with API GET request
jaguar.df <- read(url = "https://test-api-koala.herokuapp.com/jaguar")
jaguar.df$recordedOn <-  ymd_hms(jaguar.df$recordedOn, tz = "Australia/Queensland")
jaguar.df
# Get data from database with API GET request
jaguar.df <- read(url = "https://test-api-koala.herokuapp.com/jaguar")
jaguar.df$recordedOn <-  ymd_hms(jaguar.df$recordedOn, tz = "Australia/Queensland")
jaguar.df
# Get data from database with API GET request
jaguar.df <- read(url = "https://test-api-koala.herokuapp.com/jaguar")
jaguar.df$recordedOn <-  ymd_hms(jaguar.df$recordedOn, tz = "Australia/Queensland")
jaguar.df
## Move to new scene
go(image_paths = img_paths, index = 4, question_type = "multivariable")
## Don't forget to pop the question!
pop(question_type = "multivariable")
# Get data from database with API GET request
jaguar.df <- read(url = "https://test-api-koala.herokuapp.com/jaguar")
jaguar.df$recordedOn <-  ymd_hms(jaguar.df$recordedOn, tz = "Australia/Queensland")
jaguar.df
## Move to new scene
go(image_paths = img_paths, index = 4, question_type = "multivariable")
## Don't forget to pop the question!
pop(question_type = "multivariable")
## Don't forget to pop the question!
pop(question_type = "multivariable")
## Move to new scene
go(image_paths = img_paths, index = 2, question_type = "multivariable")
## Don't forget to pop the question!
pop(question_type = "multivariable")
# Get data from database with API GET request
jaguar.df <- read(url = "https://test-api-koala.herokuapp.com/jaguar")
jaguar.df$recordedOn <-  ymd_hms(jaguar.df$recordedOn, tz = "Australia/Queensland")
jaguar.df
## Pop a question for first scene
pop(question_type = "multivariable")
# Get data from database with API GET request
jaguar.df <- read(url = "https://test-api-koala.herokuapp.com/jaguar")
jaguar.df$recordedOn <-  ymd_hms(jaguar.df$recordedOn, tz = "Australia/Queensland")
jaguar.df
## Move to new scene
go(image_paths = img_paths, index = 3, question_type = "multivariable")
## Don't forget to pop the question!
pop(question_type = "multivariable")
## Move to new scene
go(image_paths = img_paths, index = 4, question_type = "multivariable")
## Don't forget to pop the question!
pop(question_type = "multivariable")
# Get data from database with API GET request
jaguar.df <- read(url = "https://test-api-koala.herokuapp.com/jaguar")
jaguar.df$recordedOn <-  ymd_hms(jaguar.df$recordedOn, tz = "Australia/Queensland")
jaguar.df
## Don't forget to pop the question!
pop(question_type = "multivariable")
## Move to new scene
go(image_paths = img_paths, index = 3, question_type = "multivariable")
## Don't forget to pop the question!
pop(question_type = "multivariable")
# Get data from database with API GET request
jaguar.df <- read(url = "https://test-api-koala.herokuapp.com/jaguar")
jaguar.df$recordedOn <-  ymd_hms(jaguar.df$recordedOn, tz = "Australia/Queensland")
jaguar.df
## Move to new scene
go(image_paths = img_paths, index = 4, question_type = "multivariable")
end()
# Enter IP
IPv4_ADDRESS <- "131.181.64.15"
# Define image paths
img_paths <- c("../inst/ext/images/koalas/KP5.jpg",
"../inst/ext/images/koalas/SP10.jpg",
"../inst/ext/images/koalas/foundKoala1.jpg",
"../inst/ext/images/koalas/foundKoala2.jpg")
animals <- binary_question_scene("Do you see any koalas in this image?", "Yes", "No", img_paths, IPv4_ADDRESS, "koala")
## Launch VR server
start(IPv4_ADDRESS)
## First participants
users.df <- record_times(participant, "start", users.df)
## Move to new scene
go(image_paths = img_paths, index = 4)
## Move to new scene
go(image_paths = img_paths, index = 4)
## Move to new scene
go(image_paths = img_paths, index = 4)
## Don't forget to pop the question!
pop()
## Move to new scene
go(image_paths = img_paths, index = 3)
## When participant is done:
end()
users.df <- record_times(participant, "end", users.df)
# Get data from database with API GET request
koala.df <- read(url = "https://test-api-koala.herokuapp.com/koala")
users.df$datetime <- ymd_hms(users.df$datetime, tz = "Australia/Queensland")
koala.df$recordedOn <-  ymd_hms(koala.df$recordedOn, tz = "Australia/Queensland")
dplyr::mutate(koala.df, userID = dplyr::case_when(recordedOn %within%
lubridate::interval(users.df[users.df$userID == participant & users.df$status == "start", "datetime"],
users.df[users.df$userID == participant & users.df$status == "end", "datetime"]) ~ participant,
TRUE ~ userID))
koala.df
# Enter IP
IPv4_ADDRESS <- "131.181.64.15"
# Define image paths
img_paths <- c("../inst/ext/images/reef/100030039.jpg",
"../inst/ext/images/reef/120261897.jpg",
"../inst/ext/images/reef/130030287.jpg",
"../inst/ext/images/reef/130050093.jpg")
## Create binary qestion scene for animals
animals <- binary_question_scene("Do the live corals on this reef form a structurally complex habitat?", "Yes", "No", img_paths, IPv4_ADDRESS, "reef")
## Launch VR server
start(IPv4_ADDRESS)
## Pop a question for first scene
pop()
## Move to new scene
go(image_paths = img_paths, index = 2)
## Move to new scene
go(image_paths = img_paths, index = 2)
## Don't forget to pop the question!
pop()
## Move to new scene
go(image_paths = img_paths, index = 3)
# Get data from database with API GET request
read(url = "https://test-api-koala.herokuapp.com/reef")
# Get data from database with API GET request
reef.df <- read(url = "https://test-api-koala.herokuapp.com/reef")
reef.df$recordedOn <-  ymd_hms(reef.df$recordedOn, tz = "Australia/Queensland")
reef.df
devtools::document()
devtools::document()
?pop
devtools::build()
devtools::build_vignettes()
library(r2vr)
library(httr)
library(jsonlite)
library(lubridate)
## Name of participant
participant <- "Grace"
record_times <- function(participant, status, users.df){users.df <- rbind(users.df, data.frame(userID = c(participant), datetime = Sys.time(), status = c(status)))}
# Enter IP
IPv4_ADDRESS <- "131.181.64.15"
# Define image paths
img_paths <- c("../inst/ext/images/koalas/KP5.jpg",
"../inst/ext/images/koalas/SP10.jpg",
"../inst/ext/images/koalas/foundKoala1.jpg",
"../inst/ext/images/koalas/foundKoala2.jpg")
animals <- binary_question_scene("Do you see any koalas in this image?", "Yes", "No", img_paths, IPv4_ADDRESS, "koala")
## Launch VR server
start(IPv4_ADDRESS)
end()
library(r2vr)
library(jsonlite)
library(httr)
library(lubridate)
## Name of participant
participant <- "Grace"
record_times <- function(participant, status, users.df){users.df <- rbind(users.df, data.frame(userID = c(participant), datetime = Sys.time(), status = c(status)))}
# Enter IP
IPv4_ADDRESS <- "131.181.64.15"
# Define image paths
img_paths <- c("../inst/ext/images/koalas/KP5.jpg",
"../inst/ext/images/koalas/SP10.jpg",
"../inst/ext/images/koalas/foundKoala1.jpg",
"../inst/ext/images/koalas/foundKoala2.jpg")
animals <- binary_question_scene("Do you see any koalas in this image?", "Yes", "No", img_paths, IPv4_ADDRESS, "koala")
## Launch VR server
start(IPv4_ADDRESS)
source('C:/spmodels/r2vr/RAnimalScripts/koala.R', echo=TRUE)
## Move to new scene
go(image_paths = img_paths, index = 4)
## Move to new scene
go(image_paths = img_paths, index = 4)
## Move to new scene
go(image_paths = img_paths, index = 4)
## Move to new scene
go(image_paths = img_paths, index = 2)
end()
## Launch VR server
start(IPv4_ADDRESS)
## Move to new scene
go(image_paths = img_paths, index = 2)
## Move to new scene
go(image_paths = img_paths, index = 2)
## Move to new scene
go(image_paths = img_paths, index = 4)
## Move to new scene
go(image_paths = img_paths, index = 4)
## Move to new scene
go(image_paths = img_paths, index = 4)
end()
devtools::build_vignettes()
devtools::document()
devtools::build()
?r2vr
