% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/entity.R
\name{a_entity}
\alias{a_entity}
\title{a_entity}
\usage{
a_entity(tag = "entity", js_sources = NULL, id = NULL, children = NULL,
  ...)
}
\arguments{
\item{tag}{text for the entity tag. The default is "a-entity", but it can be
used to create any of the A-Frame built-ins for example using "a-sphere"}

\item{js_sources}{a vector of links to Javascript files this entity depends on.
Useful if adding a community-made component to an entity. The script file
will be automatically be sourced in the html header by the parent scene.}

\item{id}{an optional id for the entity, useful if you want to later add children to it.}

\item{...}{components to be added to the entity. See description.}
}
\value{
A_Entity object
}
\description{
Create an A-Frame entity
}
\details{
This function creates an A-Frame entity object to be inserted into to an
A-Frame scene. The A-Frame scene object instructs entities to render
themselves to html, when serving or writing itself.

Function arguments map directly to underlying entity components expressed in
the html. There two tricks to this: 1. components specified in R must use an
underscore ('_') where a dash would appear in an A-Frame component name. 2.
components specified by name only, without any configuration must use the
form `component_name = NULL`. For example: to create an A-Frame entity with
the `wasd-controls` component attached, this function would be called as
`a_entity(wasd_controls = NULL)`.

Component configuration can be expressed in character form, e.g.
`wasd_controls = "fly: true; acceleration: 65"` in which case it is passed
into html directly. It can also be expressed as a list: `wasd_controls =
list(fly = TRUE, acceleration = 65)`, in which case it is converted to the
appropriate text.
}
